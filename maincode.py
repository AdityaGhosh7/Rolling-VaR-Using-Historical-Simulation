# -*- coding: utf-8 -*-
"""MainCode.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1vU6Em4an4IpU5kdjdkNtkiMR7aGZbzuN
"""

import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import warnings
import pandas as pd
import os
from arch import arch_model

!pip install arch

warnings.filterwarnings("ignore")

# Commented out IPython magic to ensure Python compatibility.
# %matplotlib inline
sns.set()
sns.set_style("whitegrid")
plt.rcParams['font.sans-serif'] = 'Times New Roman'

file_ls = [f for f in os.listdir() if f.endswith('.csv')]
file_ls

"""# New section"""

winsize = 250
len_of_s = 2 * winsize - 1

def GARCH_HS(s, winsize, day=4, miu=False):
    s = s.reset_index(drop=True)


    garch = arch_model(y=s, mean='Constant', lags=0, vol='GARCH', p=1, o=0, q=1, dist='normal')

    garchmodel = garch.fit(disp=0)
    params = garchmodel.params
    sigma = sigma_2 = np.zeros(winsize + 1)

    # Set volatility at the 1st time point of the 2nd window
    if day != 0:
        sigma[0] = (s[winsize - day:winsize]).std()
    else:
        sigma[0] = 0.0


    ret = s[winsize - 1:]
    ret = ret.reset_index(drop=True)


    # Set gamma (γ)
    if miu:
        gamma = ret - params[0]
    else:
        gamma = ret

    # gamma = ret

    gamma_2 = gamma ** 2

    for i in range(winsize):
        sigma_2[i + 1] = params[1] + params[2] * gamma_2[i] + params[3] * sigma_2[i]

    sigma = np.sqrt(sigma_2)

    wight = 1 / sigma[:-1]
    wight_ret = ret * wight * sigma[-1]
    VaR_p5 = np.percentile(wight_ret, 5)
    VaR_p50 = np.percentile(wight_ret, 50)

    return VaR_p5, VaR_p50

# Commented out IPython magic to ensure Python compatibility.
# %%time
# for j in range(1, 5):  # the 1st loop --> Panel level
# 
#     df = df_total[['date', 'R_' + str(j)]]  # df is just a temp DataFrame
#     df['VaR_5_' + str(j)] = np.nan
#     df['VaR_50_' + str(j)] = np.nan
# 
#     for k in range(df.shape[0] - len_of_s + 1):  # the 2rd loop --> time series level
#         s = df['R_' + str(j)][k:k + len_of_s]
#         VaR_5, VaR_50 = GARCH_HS(s, winsize)
#         df.loc[k + len_of_s - 1, 'VaR_5_' + str(j)] = VaR_5
#         df.loc[k + len_of_s - 1, 'VaR_50_' + str(j)] = VaR_50
# 
#     df = df.dropna()
#     if j == 1:
#         result_5 = df[['date', 'VaR_5_' + str(j)]]
#         result_50 = df[['date', 'VaR_50_' + str(j)]]
#     else:
#         result_5 = pd.merge(result_5, df[['date', 'VaR_5_' + str(j)]], how='outer')
#         result_50 = pd.merge(result_50, df[['date', 'VaR_50_' + str(j)]], how='outer')
# 
#     print("》》》》》》{}!!".format(j))

# Commented out IPython magic to ensure Python compatibility.
# %%time
# for j in range(1, 5):  # the 1st loop --> Panel level
# 
#     df = df_total[['date', 'R_' + str(j)]]  # df is just a temp DataFrame
#     df['VaR_5_' + str(j)] = np.nan
#     df['VaR_50_' + str(j)] = np.nan
# 
#     for k in range(df.shape[0] - len_of_s + 1):  # the 2nd loop --> time series level
#         s = df['R_' + str(j)][k:k + len_of_s]
#         VaR_5, VaR_50 = GARCH_HS(s, winsize, miu=True)
#         df.loc[k + len_of_s - 1, 'VaR_5_' + str(j)] = VaR_5
#         df.loc[k + len_of_s - 1, 'VaR_50_' + str(j)] = VaR_50
# 
#     df = df.dropna()
#     if j == 1:
#         result_5_ = df[['date', 'VaR_5_' + str(j)]]
#         result_50_ = df[['date', 'VaR_50_' + str(j)]]
#     else:
#         result_5_ = pd.merge(result_5_, df[['date', 'VaR_5_' + str(j)]], how='outer')
#         result_50_ = pd.merge(result_50_, df[['date', 'VaR_50_' + str(j)]], how='outer')
# 
#     print("》》》》》》{}!!".format(j))

from google.colab import drive
drive.mount('/content/drive')

plt.figure(figsize = (16, 7))

plt.plot(result_5['VaR_5_1'],
         #color='royalblue',
         lw=3,
         #linestyle='dashed',
         label='Baseline'
        )
plt.plot(result_50['VaR_50_1'],
         #color="#FF6464",
         lw=2,
         linestyle='dashed',
         label='Mean value included')
plt.legend(fontsize=20)
plt.yticks(fontsize=15)
plt.xticks(fontsize=15)
plt.show()

sns.set_style("whitegrid")
plt.rcParams['font.sans-serif'] = 'Times New Roman'
plt.figure(figsize = (20, 9))
plt.subplots_adjust(wspace=0.1)
for i_ in range(1, 5):

    plt.subplot(2, 2, i_)

    plt.plot(result_5['VaR_5_{}'.format(i_)],
             color='royalblue',
             lw=3.2,
             #linestyle='dashed',
             label='Baseline'
            )
    plt.plot(result_5_['VaR_5_{}'.format(i_)],
             color="#FF6464",
             lw=2,
             linestyle='dashed',
             label='Mean value included')
    plt.legend(fontsize=18)
    plt.yticks(fontsize=15)
    plt.xticks(fontsize=15)
    plt.title('Industry {}'.format(i_), fontsize=18)
plt.show()

plt.figure(figsize = (20, 9))
plt.subplots_adjust(wspace=0.1)
for i_ in range(1, 5):

    plt.subplot(2, 2, i_)

    plt.plot(result_50['VaR_50_{}'.format(i_)],
             #color='royalblue',
             lw=3.2,
             #linestyle='dashed',
             label='Baseline'
            )
    plt.plot(result_50_['VaR_50_{}'.format(i_)],
             #color="#FF6464",
             lw=2,
             linestyle='dashed',
             label='Mean value included')
    plt.legend(fontsize=18)
    plt.yticks(fontsize=15)
    plt.xticks(fontsize=15)
    plt.title('Industry {}'.format(i_), fontsize=18)
plt.show()

plt.figure(figsize = (20, 20))
plt.subplots_adjust(wspace=0.1, hspace=0.1)
for i_ in range(1, 5):

    plt.subplot(2, 2, i_)

    plt.scatter(result_50['VaR_50_{}'.format(i_)],
                result_50_['VaR_50_{}'.format(i_)],
                color='#66C2A5',
                alpha=0.5,
                s=120)
    plt.plot([result_50['VaR_50_{}'.format(i_)].min(), result_50_['VaR_50_{}'.format(i_)].max()],
             [result_50['VaR_50_{}'.format(i_)].min(), result_50_['VaR_50_{}'.format(i_)].max()],
             color="#FF6464",
             linestyle='--',
             lw=1.9)

    plt.legend(["45-degree line", "Baseline v.s. Mean value included"], fontsize=18)
    plt.yticks(fontsize=15)
    plt.xticks(fontsize=15)
    plt.title('Industry {}'.format(i_), fontsize=18)
plt.show()

# Commented out IPython magic to ensure Python compatibility.
# %%time
# j = 1
# for winsize in [125, 150, 175, 200, 225, 250]:
#     len_of_s = 2 * winsize - 1
#     print('OKOKOK')
#     df = df_total[['date', 'R_1']]  # df is just a temp DataFrame
#     df['VaR_5_' + str(j)] = np.nan
#     df['VaR_50_' + str(j)] = np.nan
#     print('OKOKOK')
#     for k in range(df.shape[0] - len_of_s + 1):  # the 2rd loop --> time series level
#         s = df['R_1'][k:k + len_of_s]
#         VaR_5, VaR_50 = GARCH_HS(s, winsize)
#         df.loc[k + len_of_s - 1, 'VaR_5_' + str(j)] = VaR_5
#         df.loc[k + len_of_s - 1, 'VaR_50_' + str(j)] = VaR_50
# 
#     df = df.dropna()
#     if j == 1:
#         result_5__ = df[['date', 'VaR_5_' + str(j)]]
#         result_50__ = df[['date', 'VaR_50_' + str(j)]]
#     else:
#         result_5__ = pd.merge(result_5__, df[['date', 'VaR_5_' + str(j)]], how='outer',
#                               on='date')
#         result_50__ = pd.merge(result_50__, df[['date', 'VaR_50_' + str(j)]], how='outer',
#                                on='date')
#     j += 1

winsize_ls = [125, 150, 175, 200, 225, 250]

plt.figure(figsize = (18, 6))
for i_ in range(2, 4):
    plt.plot(result_5__['VaR_5_{}'.format(i_)],
             #color='royalblue',
             lw=2,
             #linestyle='dashed',
             label='Lenth of rolling window={}'.format(winsize_ls[i_ - 1])
            )
plt.scatter(y=result_5__['VaR_5_{}'.format(6)],
           x=np.arange(result_5__.shape[0]),
           color='k',
           s=10,
           marker='o',
           alpha=0.3,
           label='Baseline(winsize=250)')
plt.legend(fontsize=16)
plt.yticks(fontsize=15)
plt.xticks(fontsize=15)
plt.savefig('Rolling VaR at different winsizes.png', dpi=500)
plt.show()

plt.style.use('ggplot')
#sns.set()
sns.set_style("whitegrid")
plt.rcParams['font.sans-serif'] = 'Times New Roman'

plt.figure(figsize = (12, 10))
for i_ in range(1, 6):

    plt.scatter(y=result_5__['VaR_5_{}'.format(i_)],
               x=result_5__['VaR_5_{}'.format(6)],
               #color='k',
               s=41,
               #marker='x',
               label='Lenth of rolling window={}'.format(winsize_ls[i_ - 1]),
               alpha=(0.6 - 0.02 * i_))
'''plt.scatter(y=result_50__['VaR_50_{}'.format(6)],
           x=result_5__['VaR_5_{}'.format(6)],
           #color='k',
           s=41,
           #marker='x',
           label='Quantile=50%',
           alpha=0.45)'''

plt.legend(fontsize=16, facecolor='white')
plt.yticks(fontsize=15)
plt.xticks(fontsize=15)
plt.xlabel('Baseline(winsize=250)', fontsize=20)
plt.ylabel('VaR at different window lenth', fontsize=20)
plt.show()

# Commented out IPython magic to ensure Python compatibility.
# %%time
# for j in range(1, 2):  # the 1st loop --> Panel level
# 
#     df = df_total[['date', 'R_' + str(j)]]  # df is just a temp DataFrame
#     df['VaR_5' + str(j)] = np.nan
#     df['VaR_1' + str(j)] = np.nan
# 
#     for k in range(df.shape[0] - len_of_s + 1):  # the 2rd loop --> time series level
#         s = df['R_' + str(j)][k:k + len_of_s]
#         VaR_5, VaR_1 = GARCH_HS(s, winsize)
#         df.loc[k + len_of_s - 1, 'VaR_5' + str(j)] = VaR_5
#         df.loc[k + len_of_s - 1, 'VaR_1' + str(j)] = VaR_1
# 
#     df = df.dropna()
#     if j == 1:
#         res_5 = df[['date', 'VaR_5' + str(j)]]
#         res_1 = df[['date', 'VaR_1' + str(j)]]
#     else:
#         res_5 = pd.merge(res_5, df[['date', 'VaR_5' + str(j)]], how='outer')
#         res_1 = pd.merge(res_1, df[['date', 'VaR_1' + str(j)]], how='outer')
# 
#     print("》》》》》》{}!!".format(j))

plt.figure(figsize = (12, 6))
plt.subplots_adjust(wspace=0.1)
plt.subplot(1, 2, 1)
for i_ in range(1, 6):

    plt.scatter(y=result_5__['VaR_5_{}'.format(i_)],
               x=result_5__['VaR_5_{}'.format(6)],
               #color='k',
               s=41,
               #marker='x',
               label='winsize={}'.format(winsize_ls[i_ - 1]),
               alpha=(0.6 - 0.02 * i_))

plt.legend(fontsize=12, facecolor='white')
plt.yticks(fontsize=12)
plt.xticks(fontsize=12)
plt.xlabel('Baseline(winsize=250)', fontsize=12)
plt.ylabel('5% VaR at different window lenth', fontsize=12)
plt.title('Panel(A)', fontsize=15)
plt.subplot(1, 2, 2)
plt.plot(res_5['VaR_51'],
         color='royalblue',
         lw=3,
         #linestyle='dashed',
         label='5% VaR'
        )
plt.plot(res_1['VaR_11'],
         color="#FF6464",
         lw=2,
         linestyle='dashed',
         label='1% VaR')
plt.legend(fontsize=16, facecolor='white')
plt.yticks(fontsize=12)
plt.xticks(fontsize=12)
plt.title('Panel(B)', fontsize=15)
plt.xlabel('Trade day', fontsize=12)
plt.savefig('Function of Main code.png', dpi=600)
plt.show()

